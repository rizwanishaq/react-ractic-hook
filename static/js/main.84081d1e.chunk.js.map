{"version":3,"sources":["components/Todo.js","components/TodoFrom.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","key","style","textDecoration","isCompleted","text","onClick","TodoFrom","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTodos","newTodos","splice","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAuBeA,MArBf,YAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,wBACEC,UAAU,oEACVC,IAAKJ,EACLK,MAAO,CAAEC,eAAgBP,EAAKQ,YAAc,eAAiB,KAE5DR,EAAKS,KACN,0BAAML,UAAU,kCACd,4BAAQA,UAAU,cAAcM,QAAS,kBAAMR,EAAaD,KAA5D,YAIA,4BAAQG,UAAU,cAAcM,QAAS,kBAAMP,EAAWF,KAA1D,Q,MCoBOU,MAjCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAW7B,OACE,0BACEC,SAViB,SAAAC,GACnBA,EAAEC,iBAEGJ,IACLF,EAAQE,GACRC,EAAS,MAMPX,UAAU,6CAEV,yBAAKA,UAAU,cACb,2BACEe,KAAK,OACLf,UAAU,eACVU,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,WAGrC,0BAAMV,UAAU,kCACd,4BAAQe,KAAK,SAASf,UAAU,mBAAhC,0BCmCOkB,MAzDf,WAAgB,IAAD,EACaT,mBAAS,CACjC,CACEJ,KAAM,0BACND,aAAa,GAEf,CACEC,KAAM,yBACND,aAAa,GAEf,CACEC,KAAM,sBACND,aAAa,KAZJ,mBACNe,EADM,KACCC,EADD,KAqBPtB,EAAe,SAAAD,GACnB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASxB,GAAOO,aAAc,EAC9BgB,EAASC,IAGLtB,EAAa,SAAAF,GACjB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASC,OAAOzB,EAAO,GACvBuB,EAASC,IAGX,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cACXmB,EAAMI,KAAI,SAAC3B,EAAMC,GAAP,OACT,kBAAC,EAAD,CACEI,IAAKJ,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,UAMtB,yBAAKC,UAAU,mBACb,kBAAC,EAAD,CAAUQ,QAnCA,SAAAH,GACd,IAAMgB,EAAQ,sBAAOF,GAAP,CAAc,CAAEd,UAC9Be,EAASC,SCXOG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.84081d1e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <li\n      className=\"list-group-item d-flex justify-content-between align-items-center\"\n      key={index}\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n    >\n      {todo.text}\n      <span className=\"badge badge-primary badge-pill\">\n        <button className=\"btn-primary\" onClick={() => completeTodo(index)}>\n          Complete\n        </button>\n\n        <button className=\"btn-primary\" onClick={() => removeTodo(index)}>\n          x\n        </button>\n      </span>\n    </li>\n  );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\n\nfunction TodoFrom({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"form-inline d-flex justify-content-center\"\n    >\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n      <span className=\"badge badge-primary badge-pill\">\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Add an item to list\n        </button>\n      </span>\n    </form>\n  );\n}\n\nexport default TodoFrom;\n","import React, { useState } from \"react\";\nimport Todo from \"./components/Todo\";\nimport \"./App.css\";\nimport TodoFrom from \"./components/TodoFrom\";\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      text: \"Need to learn something\",\n      isCompleted: false\n    },\n    {\n      text: \"Some practice for Dask\",\n      isCompleted: false\n    },\n    {\n      text: \"Watch amazing movie\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"jumbotron d-flex align-items-center\">\n        <div className=\"container\">\n          <ul className=\"list-group\">\n            {todos.map((todo, index) => (\n              <Todo\n                key={index}\n                index={index}\n                todo={todo}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className=\"container-fluid\">\n        <TodoFrom addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}